//==============================================================
//=		請勿手動修改此檔案，此為T4範本自動產生。			   =
//=								By Edward Huang(2017/8/5)	   =
//==============================================================

/*
  In App.xaml:
  <Application.Resources>
      <vm:ViewModelLocator xmlns:vm="clr-namespace:Tokiku.ViewModels"
                           x:Key="Locator" />
  </Application.Resources>
  
  In the View:
  DataContext="{Binding Source={StaticResource Locator}, Path=ViewModelName}"

  You can also use Blend to do all this with the tool's support.
  See http://www.galasoft.ch/mvvm
*/
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#
	// create an instance of the AutomationHelper class so 
	// that it is accessible from everywhere within the template
	this.VisualStudioHelper = new AutomationHelper(this.Host);

	var hostServiceProvider = (IServiceProvider)Host;
	var dte = VisualStudioHelper.DTE;		
	var activeSolutionProjects = VisualStudioHelper.GetAllProjects();
	var dteProject = VisualStudioHelper.CurrentProject;
	var defaultNamespace = 
		dteProject.Properties.Item("DefaultNamespace").Value;
	var templateDir = Path.GetDirectoryName(Host.TemplateFile);
	var fullPath = dteProject.Properties.Item("FullPath").Value.ToString();
	fullPath =
		fullPath.EndsWith("\\")
			? fullPath.Substring(0, fullPath.Length-1)
			: fullPath;
	var subNamespace =
		templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
	var fileNamespace = string.Concat(defaultNamespace, subNamespace);
	var AsmTypes = System.Reflection.Assembly.GetExecutingAssembly().GetTypes();

	VsCodeModel s;
	var p=	VisualStudioHelper.GetProject(VisualStudioHelper.CurrentProject.Name);
	var fs=	VisualStudioHelper.GetAllProjectItems(p);	

	Stack<string> NamespaceStack = new Stack<string>();
	Dictionary<string,vsClassState> classbook = new Dictionary<string,vsClassState>();
	
	foreach(var t in fs)
	{ 
		if(t == null)
			continue;

		//取得程式碼項目
		EnvDTE.FileCodeModel codedom_f = t.FileCodeModel;

		if(codedom_f==null)
			continue;
		
		//取得類別
		var celts = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(codedom_f.CodeElements,EnvDTE.vsCMElement.vsCMElementClass,false);
		
		foreach(EnvDTE.CodeClass celt in celts)
		{
			try
            {
				bool isaddclass = false;
				bool isaddinterface = false;
				bool iskeepalive=false;
				bool isexecption=false;
				string addinterfacename = string.Empty;

				if(celt.IsAbstract)
					isexecption=true;

				if(celt.FullName.EndsWith("Locator"))
					isexecption=true;

				if(celt.FullName.EndsWith("Converter"))
					isexecption=true;
				
				switch(celt.Name)
                {
					case "EFRepository":
					case "RepositoryHelper":
					case "App":
					case "ThemeResourceDictionary":
					case "Program":
					case "ClipboardHelper":
					case "ThemeManager":
					case "Tools":
					case "Resources":
					case "Settings":
						isaddclass=true;
						isexecption=true;
						break;
                }

				if(isexecption)
					continue;

				if(!NamespaceStack.Contains(celt.Namespace.FullName))
					NamespaceStack.Push(celt.Namespace.FullName);			
				
				if(celt.Bases.Count>0)
				{
					//取出繼承的類別
					foreach(EnvDTE.CodeElement inherit_Class in celt.Bases)
					{
						if(inherit_Class!=null 
							&& ((EnvDTE.CodeClass)inherit_Class).IsAbstract==false)
						{
							switch(inherit_Class.FullName)
							{
								case "Window":
								case "Control":
									isaddclass=true;
									break;
								case "EFRepository":
									isaddclass=true;									
									iskeepalive=true;
									break;
                            }	
						}						

						if(isaddclass)
							break;
					}
                }


				//取出實作的介面
				foreach(EnvDTE.CodeInterface imp_interface in celt.ImplementedInterfaces)
				{
					switch(imp_interface.Name)
					{
						case "IBaseViewModel":							
						case "IEntityBaseViewModel":
						case "IDocumentBaseViewModel":
						case "IBaseViewModelWithLoginedUser":
						case "IController":
						case "IControllerBase":
						case "IDataService":
							isaddclass=true;
							isaddinterface = false;						
							break;
						case "IRepositoryBase":						
							isaddclass=true;
							isaddinterface = false;
							iskeepalive=true;
							addinterfacename=imp_interface.Name;
							break;
						case "IUnitOfWork":
							isaddclass=true;
							isaddinterface=true;
							iskeepalive=true;
							addinterfacename=imp_interface.Name;
							break;
                    }

					if(isaddclass && isaddinterface)
						break;

					//取得介面繼承的父代介面
					var base_imp_interfaces = VisualStudioHelper.CodeModel.GetAllBaseInterfaces(imp_interface)
						.Where(w=>w.IsCodeType && (w.Name=="IBaseViewModel"
						|| w.Name == "IBaseViewModelWithLoginedUser"
						|| w.Name == "IEntityBaseViewModel"
						|| w.Name == "IDocumentBaseViewModel"
						|| w.Name == "IUnitOfWork"
						|| w.Name == "IRepositoryBase"
						|| w.Name == "IController"
						|| w.Name == "IControllerBase"
						|| w.Name == "IDataService"));

					if(base_imp_interfaces.Any())
					{
						isaddclass=true;
						isaddinterface=true;

						if(base_imp_interfaces.Any(d=>d.Name=="IRepositoryBase"))
							iskeepalive=true;		
	
						if(base_imp_interfaces.Any(d=>d.Name=="IUnitOfWork"))
							iskeepalive=true;		
						addinterfacename = imp_interface.Name;
						
						if(!NamespaceStack.Contains(imp_interface.Namespace.FullName))
							NamespaceStack.Push(imp_interface.Namespace.FullName);

						break;
                    }

                }

				vsClassState newState = new vsClassState();

				if(iskeepalive)
					newState.IsKeepAlive=iskeepalive;	

				newState.InterfaceName = string.Empty;

				if(isaddinterface)
                {
					newState.InterfaceName = addinterfacename;							
                }
					
				if(!classbook.ContainsKey(celt.Name))
				{
					classbook.Add(celt.Name,newState);				
				}
				else
				{
					classbook[celt.Name] = newState;
				}			
				
            }
			catch
			{
				continue;
            }
        }
	}
	
#>using GalaSoft.MvvmLight.Ioc;
using Microsoft.Practices.ServiceLocation;
<#
	while(NamespaceStack.Count>0)
	{
		if(NamespaceStack.Peek().Equals(defaultNamespace))
        {
			NamespaceStack.Pop();
			continue;
        }
		else
        {
#>
using <#= NamespaceStack.Pop() #>;
<#
        }
    }
	var rootclassname = (!string.IsNullOrEmpty(subNamespace.Trim('.')) ? subNamespace.Trim('.') : (((string)defaultNamespace).EndsWith("ViewModels") ? "ViewModel" : ((string)defaultNamespace).EndsWith("Entity")? "Entity":"Default"));
#>

namespace <#= defaultNamespace #> 
{	
	public partial class <#= rootclassname #>Locator
	{
		public <#= rootclassname #>Locator()
		{
			if (!ServiceLocator.IsLocationProviderSet)
                ServiceLocator.SetLocatorProvider(() => SimpleIoc.Default);
<#
	foreach(string classname in classbook.Keys)
    {
		if(!string.IsNullOrEmpty(classbook[classname].InterfaceName))
        {
#>

			if (!SimpleIoc.Default.IsRegistered<<#= classbook[classname].InterfaceName #>>())
<#
			if(classbook[classname].IsKeepAlive)
            {
#>				SimpleIoc.Default.Register<<#= classbook[classname].InterfaceName #>,<#= classname #>>(true);
<#			}
			else
            {
#>				SimpleIoc.Default.Register<<#= classbook[classname].InterfaceName #>,<#= classname #>>();			
<#
            }
        }
		else
		{			
#>
			
			if (!SimpleIoc.Default.IsRegistered<<#= classname #>>())
<#
			if(classbook[classname].IsKeepAlive)
            {
#>				SimpleIoc.Default.Register<<#= classname #>>(true);
<#
            }
			else
            {
#>				SimpleIoc.Default.Register<<#= classname #>>();
<#
            }
		}		    

    }
#>										
            if (_Current == null)
                _Current = this;
		}

		private static <#= rootclassname #>Locator _Current=null;
		
		/// <summary>
        /// 取得預設的容器解析物件。
        /// </summary>
        public static <#= rootclassname #>Locator Current
        {
            get
            {
                if (_Current == null)
                    _Current = new <#= rootclassname #>Locator();
                return _Current;
            }
        }

<#
	foreach(string classname in classbook.Keys)
    {
		if(!string.IsNullOrEmpty(classbook[classname].InterfaceName))
        {
#>
		/// <summary>
        /// 取得IoC容器中的實作 <#= classbook[classname].InterfaceName #> 介面的物件執行個體。
        /// </summary>
		public <#= classbook[classname].InterfaceName #> <#= classname #>
		{
			get => SimpleIoc.Default.GetInstance<<#= classbook[classname].InterfaceName #>>();
		}
<#
        }
		else
        {
#>
		/// <summary>
        /// 取得IoC容器中的 <#= classname #> 物件執行個體。
        /// </summary>
		public <#= classname #> <#= classname #>
		{
			get => SimpleIoc.Default.GetInstance<<#= classname #>>();
		}
<#
		}
    }
#>
	}
}
<#+
/// <summary>
/// Object that provides functionality for automating Visual Studio.
/// </summary>
public AutomationHelper VisualStudioHelper;

/// <summary>
/// This class provides functionality for automating Visual Studio.
/// </summary>
public class AutomationHelper 
{
	/// <summary>
	/// Creates a new instance of this class
	/// </summary>
	public AutomationHelper(object host)
	{
		// store a reference to the template host
		// we will need this frequently
		this.Host = host as ITextTemplatingEngineHost;

		// initialize the code model API
		this.CodeModel = new VsCodeModel(this);
	}
	
	private EnvDTE.DTE _DTE = null;
	/// <summary>
	/// Returns a reference to the primary management object of Visual Studio
	/// <summary>
	public EnvDTE.DTE DTE
	{
		get
		{
			if (_DTE == null)
            {
				var hostServiceProvider = this.Host as IServiceProvider;
				if (hostServiceProvider != null)
					_DTE = hostServiceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            }
			return _DTE;
		}
	}
	
	/// <summary>
	/// Stores a reference to the Host of the t4 template
	/// </summary>
	public ITextTemplatingEngineHost Host { get; private set; }


	#region Solution and Projects
	/// <summary>
	/// Gets the full path of the solution file
	/// </summary>
	public string SolutionFile
    {
		get
        {
			return this.DTE.Solution.FileName;
        }
    }
	/// <summary>
	/// Gets the file name of the currently opened solution.
	/// </summary>
	public string SolutionFileName
    {
		get
        {
			return System.IO.Path.GetFileName(this.DTE.Solution.FileName);
        }
    }
	/// <summary>
	/// Gets the name of the currently opened solution
	/// </summary>
	public string SolutionName
    {
		get
        {
			return this.DTE.Solution.Properties.Item("Name").Value.ToString();
        }
    }

	/// <summary>
	/// Gets a list of all Projects within the solution
	/// </summary>
	public IEnumerable<EnvDTE.Project> GetAllProjects()
    {
		var ret = new List<EnvDTE.Project>();

		// take all projects that are at top level of the solution
		// and recursively search Project folders
		var topLevelProjects = this.DTE.Solution.Projects;

		foreach(EnvDTE.Project project in topLevelProjects)
        {
			if (project.Kind == vsProjectType.SolutionFolder)
				ret.AddRange(GetProjectsFromItemsCollection(project.ProjectItems));
			else
				ret.Add(project);
        }

		return ret;
    }
	/// <summary>
	/// Gets the project object within the current solution by a given project name.
	/// </summary>
	public EnvDTE.Project GetProject(string projectName)
    {
		return this.GetAllProjects()
				   .Where(p => p.Name == projectName)
				   .First();
    }
	/// <summary>
	/// Gets the project containing the .tt-File
	/// </summary>
	public EnvDTE.Project CurrentProject
    {
		get
        {
			return this.FindProjectItem(this.Host.TemplateFile).ContainingProject;
        }
    }
	#endregion

	#region Project Items
	public EnvDTE.ProjectItem FindProjectItem(string fileName)
    {
		return this.DTE.Solution.FindProjectItem(fileName);
    }
	/// <summary>
	/// Gets all project items from the current solution
	/// </summary>
	public IEnumerable<EnvDTE.ProjectItem>GetAllSolutionItems()
    {
		var ret = new List<EnvDTE.ProjectItem>();

		// iterate all projects and add their items
		foreach(EnvDTE.Project project in this.GetAllProjects())
			ret.AddRange(GetAllProjectItems(project));

		return ret;
    }
	/// <summary>
	/// Gets all project items from the current project
	/// </summary>
	public IEnumerable<EnvDTE.ProjectItem>GetAllProjectItems()
    {
		// get the project of the template file and reeturn all its items
		var project = this.CurrentProject;
		return GetAllProjectItems(project);
    }
	/// <summary>
	/// Gets all Project items from a given project. 
	/// </summary>
	public IEnumerable<EnvDTE.ProjectItem>GetAllProjectItems(EnvDTE.Project project)
    {
		return this.GetProjectItemsRecursively(project.ProjectItems);
    }
	#endregion

	#region CodeModel
	public VsCodeModel CodeModel { get; private set; }
	#endregion

	#region Auxiliary stuff
	private List<EnvDTE.Project> GetProjectsFromItemsCollection(EnvDTE.ProjectItems items)
    {
		var ret = new List<EnvDTE.Project>();

		foreach(EnvDTE.ProjectItem item in items)
        {
			if (item.SubProject == null)
				continue;
			else if (item.SubProject.Kind == vsProjectType.SolutionFolder)
				ret.AddRange(GetProjectsFromItemsCollection(item.SubProject.ProjectItems));
			else if (item.SubProject.Kind == vsProjectType.VisualBasic
				  || item.SubProject.Kind == vsProjectType.VisualCPlusPlus
				  || item.SubProject.Kind == vsProjectType.VisualCSharp
				  || item.SubProject.Kind == vsProjectType.VisualJSharp
				  || item.SubProject.Kind == vsProjectType.WebProject)
				ret.Add(item.SubProject);
        }

		return ret;
    }
	private List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
    {
		var ret = new List<EnvDTE.ProjectItem>();
        if (items == null) return ret;
		
		foreach(EnvDTE.ProjectItem item in items)
        {
			ret.Add(item);
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
        }

		return ret;
    }
	#endregion
		
}

///<summary>
/// Provides functionality to assist "reflecting" the Visual Studio Code Model
/// </summary>
public class VsCodeModel
{
	internal VsCodeModel(AutomationHelper helper)
    {
		this.VisualStudioHelper = helper;
    }
	private AutomationHelper VisualStudioHelper { get; set; }

	/// <summary>
    /// Searches a given collection of CodeElements recursively for objects of the given elementType.
    /// </summary>
    /// <param name="elements">Collection of CodeElements to recursively search for matching objects in.</param>
    /// <param name="elementType">Objects of this CodeModelElement-Type will be returned.</param>
    /// <param name="includeExternalTypes">If set to true objects that are not part of this solution are retrieved, too. E.g. the INotifyPropertyChanged interface from the System.ComponentModel namespace.</param>
    /// <returns>A list of CodeElement objects matching the desired elementType.</returns>
    public IEnumerable<EnvDTE.CodeElement> GetAllCodeElementsOfType(EnvDTE.CodeElements elements, EnvDTE.vsCMElement elementType, bool includeExternalTypes)
    {
        var ret = new List<EnvDTE.CodeElement>();

        foreach (EnvDTE.CodeElement elem in elements)
        {
            // iterate all namespaces (even if they are external)
            // > they might contain project code
            if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace)
            {
                ret.AddRange(GetAllCodeElementsOfType(((EnvDTE.CodeNamespace)elem).Members, elementType, includeExternalTypes));
            }
            // if its not a namespace but external
            // > ignore it
            else if (elem.InfoLocation == EnvDTE.vsCMInfoLocation.vsCMInfoLocationExternal
                    && !includeExternalTypes)
                continue;
            // if its from the project
            // > check its members
            else if (elem.IsCodeType)
            {
                ret.AddRange(GetAllCodeElementsOfType(((EnvDTE.CodeType)elem).Members, elementType, includeExternalTypes));
            }

            // if this item is of the desired type
            // > store it
            if (elem.Kind == elementType)
                ret.Add(elem);
        }

        return ret;
    }

	/// <summary>
	/// Recursively gets all methods and functions implemented either by the class itself, or one of its base classes.
	/// </summary>
	public IEnumerable<EnvDTE.CodeFunction> GetAllMethods(EnvDTE.CodeClass codeClass)
    {
		var implFunctions = new List<EnvDTE.CodeFunction>();

		implFunctions.AddRange(GetMethods(codeClass));
		var baseClass = GetBaseClass(codeClass);
		if (baseClass != null)
			implFunctions.AddRange(GetAllMethods(baseClass));

		return implFunctions.Distinct(new CodeFunctionEqualityComparer());
    }

	/// <summary>
	/// Gets all methods and functions directly implemented by a code class
	/// </summary>
	public IEnumerable<EnvDTE.CodeFunction> GetMethods(EnvDTE.CodeClass codeClass)
    {
		return GetAllCodeElementsOfType(codeClass.Members, EnvDTE.vsCMElement.vsCMElementFunction, true).OfType<EnvDTE.CodeFunction>();
    }


	/// <summary>
	/// Recursively gets all interfaces a given CodeClass implements either itself, one of its base classes or as an inherited interface.
	/// Respects partial classes.
	/// </summary>
	public IEnumerable<EnvDTE.CodeInterface> GetAllImplementedInterfaces(EnvDTE.CodeClass codeClass)
    {
		var implInterfaces = new List<EnvDTE.CodeInterface>();

		foreach(var partialClass in GetPartialClasses(codeClass))
        {
			foreach(EnvDTE.CodeInterface ci in GetImplementedInterfaces(partialClass))
			{
				implInterfaces.Add(ci);
				implInterfaces.AddRange(GetAllBaseInterfaces(ci));
			}
		
			var baseClass = GetBaseClass(partialClass);
			if (baseClass != null)
				implInterfaces.AddRange(GetAllImplementedInterfaces(baseClass));
        }
		
		return implInterfaces.Distinct(new CodeInterfaceEqualityComparer());
    }
	/// <summary>
	/// Gets all interfaces a given CodeClass implements directly.
	/// </summary>
	public IEnumerable<EnvDTE.CodeInterface> GetImplementedInterfaces(EnvDTE.CodeClass codeClass)
    {
		return GetAllCodeElementsOfType(codeClass.ImplementedInterfaces, EnvDTE.vsCMElement.vsCMElementInterface, true).OfType<EnvDTE.CodeInterface>();
    }
	/// <summary>
	/// Recursively gets all interfaces a given CodeInterface implements/inherits from.
	/// </summary>
	public IEnumerable<EnvDTE.CodeInterface> GetAllBaseInterfaces(EnvDTE.CodeInterface codeInterface)
    {
		var ret = new List<EnvDTE.CodeInterface>();

		var directBases = GetBaseInterfaces(codeInterface);
		ret.AddRange(directBases);

		foreach(var baseInterface in directBases)
			ret.AddRange(GetAllBaseInterfaces(baseInterface));

		return ret;
    }
	/// <summary>
	/// Returns a list of all base interfaces a given CodeInterface implements/inherits from.
	/// </summary>
	public IEnumerable<EnvDTE.CodeInterface> GetBaseInterfaces(EnvDTE.CodeInterface codeInterface)
    {
		return codeInterface.Bases.OfType<EnvDTE.CodeInterface>();
    }

	/// <summary>
	/// Recursively gets all base classes of the given CodeClass respecting partial implementations.
	/// </summary>
	public IEnumerable<EnvDTE.CodeClass> GetAllBaseClasses(EnvDTE.CodeClass codeClass)
    {
		var ret = new List<EnvDTE.CodeClass>();

		// iterate all partial implementations
		foreach(EnvDTE.CodeClass partialClass in GetPartialClasses(codeClass))
        {
			// climb up the inheritance tree
			var cc = partialClass;
			while(cc != null)
			{
				cc = GetBaseClass(cc);
				if (cc != null) ret.Add(cc);
			}
        }

		return ret;
    }
	/// <summary>
	/// Returns the base class of a given CodeClass, if it has any.
	/// </summary>
	public EnvDTE.CodeClass GetBaseClass(EnvDTE.CodeClass codeClass)
    {
		return codeClass.Bases.OfType<EnvDTE.CodeClass>().FirstOrDefault();
    }

	/// <summary>
	/// Checks if the given CodeClass has partial implementations.
	/// </summary>
	/// <returns> A list of the partial CodeClasses that form the given class. If the class is not partial, the class itself is returned in the list.</returns>
	public IEnumerable<EnvDTE.CodeClass> GetPartialClasses(EnvDTE.CodeClass codeClass)
    {
		var classParts = new List<EnvDTE.CodeClass>();

		// partial classes are a new feature and only available in the CodeClass2 interface
		// check if the given class is a CodeClass2
		if (codeClass is EnvDTE80.CodeClass2)
        {
			// yes, it is
			EnvDTE80.CodeClass2 cc2 = (EnvDTE80.CodeClass2)codeClass;
			// check if it consists of multiple partial classes
			if (cc2.ClassKind != EnvDTE80.vsCMClassKind.vsCMClassKindPartialClass)
				// no > only return the class itself
				classParts.Add(cc2);
			else
				// yes > add all partial classes
				classParts.AddRange(cc2.PartialClasses.OfType<EnvDTE.CodeClass>());
        }
		else
			// this is no CodeClass2 > return itself
			classParts.Add(codeClass);

		return classParts;
    }

	#region private classes
	private class CodeInterfaceEqualityComparer : IEqualityComparer<EnvDTE.CodeInterface>
    {
        public bool Equals(EnvDTE.CodeInterface x, EnvDTE.CodeInterface y)
        {
			var n1 = x.FullName;
			var n2 = y.FullName;
            return n1 == n2;
        }

        public int GetHashCode(EnvDTE.CodeInterface obj)
        {
            return obj.FullName.GetHashCode();
        }
    }
	private class CodeFunctionEqualityComparer : IEqualityComparer<EnvDTE.CodeFunction>
    {
		public bool Equals(EnvDTE.CodeFunction x, EnvDTE.CodeFunction y)
        {
			var n1 = x.FullName;
			var n2 = y.FullName;
			return n1 == n2;
        }
		
		public int GetHashCode(EnvDTE.CodeFunction obj)
        {
			return obj.FullName.GetHashCode();
        }
    }
	#endregion 
}

public class vsProjectType
{
	public const string SolutionFolder = "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}";
	public const string VisualBasic = "{F184B08F-C81C-45F6-A57F-5ABD9991F28F}";
	public const string VisualCSharp = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
	public const string VisualCPlusPlus = "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}";
	public const string VisualJSharp = "{E6FDF86B-F3D1-11D4-8576-0002A516ECE8}";
	public const string WebProject = "{E24C65DC-7377-472b-9ABA-BC803B73C61A}";
}

public class vsClassState{
	public string InterfaceName {get;set;}
	public bool IsKeepAlive {get;set;}
}
#>