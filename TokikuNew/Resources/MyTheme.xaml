<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:TokikuNew.Controls"
                   >
    <RoutedUICommand x:Key="CloseTab" Text="Close Tab"/>
    <Style TargetType="DataGridColumnHeader" x:Key="HeaderStyleCenter">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>
    <Style TargetType="TabControl" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Header}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding ContentView}"/>
                </DataTemplate>
            </Setter.Value>            
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=SelectedItem.CanClose, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}}}"  Value="True">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <controls:ClosableTab DataContext="{Binding Header}" x:Name="ContentSite">
                            </controls:ClosableTab>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TextBox}" x:Key="ReadModeSwitch" BasedOn="{StaticResource  {x:Type TextBox}}">
        <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrush}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding Text, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsReadOnly" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="IsReadOnly" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type RichTextBox}" x:Key="RichReadModeSwitch" BasedOn="{StaticResource  {x:Type RichTextBox}}">
        <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrush}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Mode,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="IsReadOnly" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="IsReadOnly" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ComboBox}" x:Key="ReadModeSwitch_ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsReadOnly" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="IsReadOnly" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DatePicker}" x:Key="ReadModeSwitch_DatePicker" BasedOn="{StaticResource {x:Type DatePicker}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="DatePicker">
                            <TextBlock Text="{TemplateBinding Text}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="DatePicker">
                            <TextBlock Text="{TemplateBinding Text}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="IsEnabled" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=SwitchTo,ElementName=userControl}" Value="DatePicker">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="ReadModeSwitch_TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="ReadModeSwitch_Button" BasedOn="{StaticResource {x:Type Button}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="ReadModeSwitch_ModifyButton" BasedOn="{StaticResource {x:Type Button}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="NormalButtonStyle" BasedOn="{StaticResource {x:Type Button}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Value="{x:Null}" Binding="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="ReadModeSwitch_SaveButton" BasedOn="{StaticResource {x:Type Button}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DocumentMode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Read">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Save">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Create">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Mode,ElementName=userControl}" Value="Update">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DataGrid_Centering" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}" x:Key="GroupBox_DocumentEditor">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="4" CornerRadius="4,4,4,4" BorderThickness="1,1,1,1">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="1.204,0.5" StartPoint="0.056,0.5">
                                    <GradientStop Color="#FFFFFFFF" Offset="0" />
                                    <GradientStop Color="#FFD4D7DB" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1,1,1,1" CornerRadius="4" BorderBrush="{DynamicResource ControlBorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource MainColor}" />
                                </Border.BorderBrush>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource MainColor}" />
                                    </Border.BorderBrush>
                                </Border>
                            </Border>
                        </Border>
                        <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" />
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="2" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" x:Name="Main">
                            <Border x:Name="BackgroundNorm" BorderThickness="1" CornerRadius="1.75" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"/>
                        </Border>

                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True" Margin="0,4,0,4" HorizontalAlignment="Left" />
                        </Border>
                        <!--<ctrl:DockBar x:Name="dockBar" Panel.ZIndex="999" VerticalAlignment="Center" Grid.Row="0" Grid.RowSpan="2"  Grid.Column="2" Background="{TemplateBinding Background}" HorizontalAlignment="Right" DocumentMode="{Binding Path=Mode, ElementName=userControl}">
     
                        </ctrl:DockBar>-->
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}" x:Key="GroupBox_ListEditor">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="4" CornerRadius="4,4,4,4" BorderThickness="1,1,1,1">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="1.204,0.5" StartPoint="0.056,0.5">
                                    <GradientStop Color="#FFFFFFFF" Offset="0" />
                                    <GradientStop Color="#FFD4D7DB" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1,1,1,1" CornerRadius="4" BorderBrush="{DynamicResource ControlBorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource MainColor}" />
                                </Border.BorderBrush>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{DynamicResource MainColor}" />
                                    </Border.BorderBrush>
                                </Border>
                            </Border>
                        </Border>
                        <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" />
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="2" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" x:Name="Main">
                            <Border x:Name="BackgroundNorm" BorderThickness="1" CornerRadius="1.75" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}"/>
                        </Border>

                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True" Margin="0,4,0,4" HorizontalAlignment="Left" />
                        </Border>
                        <Button Margin="2" Grid.Row="0" Grid.RowSpan="2" Grid.Column="2" HorizontalAlignment="Right"  Content="&#xE104;" FontFamily="/Resources/#Segoe MDL2 Assets" />
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>